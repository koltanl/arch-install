# Arch Linux VM Testing Debug Plan

## 1. Initial Setup Verification
1. Check all required packages:
```bash
sudo pacman -S qemu-full libvirt edk2-ovmf virt-viewer bridge-utils ebtables dnsmasq
sudo systemctl enable --now libvirtd
```

2. Verify user permissions:
```bash
sudo usermod -aG libvirt,kvm $USER
# Log out and back in
groups  # Verify libvirt and kvm are listed
```

## 2. Network Setup Debugging
1. Check existing networks:
```bash
sudo virsh net-list --all
```

2. Verify bridge creation permissions:
```bash
sudo chmod u+x /usr/lib/qemu/qemu-bridge-helper
sudo mkdir -p /etc/qemu
echo "allow virbr111" | sudo tee /etc/qemu/bridge.conf
```

3. Test network creation manually:
```bash
# Save network XML
cat > /tmp/test-net.xml <<EOF
<network>
  <name>arch-test-net</name>
  <bridge name='virbr111'/>
  <forward mode='nat'/>
  <ip address='192.168.111.1' netmask='255.255.255.0'>
    <dhcp>
      <range start='192.168.111.2' end='192.168.111.254'/>
    </dhcp>
  </ip>
</network>
EOF

# Try creating network
sudo virsh net-define /tmp/test-net.xml
sudo virsh net-start arch-test-net
sudo virsh net-autostart arch-test-net
```

## 3. VM Creation Testing
1. Test basic VM creation:
```bash
virt-install \
    --connect qemu:///system \
    --name test-vm \
    --memory 4096 \
    --vcpus 2 \
    --disk size=20 \
    --network network=arch-test-net \
    --boot uefi \
    --graphics spice \
    --dry-run
```

2. Check disk permissions:
```bash
ls -la ~/.local/share/libvirt/images/
sudo chown $USER:$USER ~/.local/share/libvirt/images
```

## 4. Systematic Testing Steps

1. Clean Environment Test
```bash
# Stop libvirtd
sudo systemctl stop libvirtd

# Remove all VM-related files
sudo rm -rf /etc/libvirt/qemu/arch-install-test.xml
sudo rm -rf ~/.local/share/libvirt/images/arch-install-test.qcow2
sudo rm -rf /var/lib/libvirt/qemu/domain-*/

# Restart libvirtd fresh
sudo systemctl start libvirtd
```

2. Network-Only Test
```bash
# Run only network setup portion
./test-installer.sh --network-test  # (add this option)
```

3. VM-Only Test
```bash
# Run only VM creation
./test-installer.sh --vm-test  # (add this option)
```

## 5. Common Issues and Solutions

1. USB Redirection Error
- Remove USB-related features
- Use basic SPICE graphics
- Add to virt-install: `--features kvm_hidden=on`

2. Disk In Use Error
- Add force cleanup
- Add delay after cleanup
- Check process list: `ps aux | grep qemu`

3. Network Bridge Error
- Check bridge module: `lsmod | grep bridge`
- Load if needed: `sudo modprobe bridge`
- Verify bridge tools: `brctl show`

4. Permission Issues
- Check libvirt logs: `sudo journalctl -u libvirtd`
- Verify QEMU permissions: `ls -la /usr/bin/qemu-system-x86_64`
- Check AppArmor/SELinux if enabled

## 6. Testing Modifications

Add these debug options to test-installer.sh:
```bash
--network-test    Test only network setup
--vm-test        Test only VM creation
--debug          Enable verbose output
--keep-failed    Don't clean up on failure
```

## 7. Success Criteria

1. Network Setup:
- Bridge interface exists
- DHCP server running
- Network is NAT-enabled

2. VM Creation:
- VM starts without errors
- Can connect via SPICE
- Gets correct IP address
- SSH access works

3. Installation:
- Boots from ISO
- Reaches login prompt
- Can log in as root

## 8. Next Steps

1. Add network test function
2. Add VM-only test function
3. Add verbose logging
4. Create separate cleanup levels
5. Add connection verification
6. Implement automatic testing of installation process

## 9. Final Verification

Complete test sequence:
1. Clean environment
2. Create network
3. Create VM
4. Boot VM
5. Verify network
6. Test SSH access
7. Clean up